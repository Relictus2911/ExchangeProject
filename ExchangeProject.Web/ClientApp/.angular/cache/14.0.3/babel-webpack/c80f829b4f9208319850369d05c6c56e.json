{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport { map, startWith } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../exchange/exchange.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/core\";\nimport * as i5 from \"@angular/material/datepicker\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"../exchange-rate-card/exchange-rate-card.component\";\n\nfunction ExchangeFormComponent_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r3.code, \" \");\n  }\n}\n\nfunction ExchangeFormComponent_ng_container_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"app-exchange-rate-card\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const WHAT_r4 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"exchangeRate\", WHAT_r4);\n  }\n}\n\nexport class ExchangeFormComponent {\n  constructor(exchangeService) {\n    this.exchangeService = exchangeService;\n    this.exchangeForm = new FormGroup({\n      currency: new FormControl(),\n      date: new FormControl('')\n    });\n    this.myControl = new FormControl('');\n    this.dateControl = new FormControl(new Date());\n    this.options = ['One', 'Two', 'Three'];\n    this.lel = 'fff';\n  }\n\n  ngOnInit() {\n    this.options$ = this.exchangeService.getAllCurrencies();\n    this.filteredOptions$ = this.myControl.valueChanges.pipe(startWith(''), map(value => this._filter(value || '')));\n    this.exchangeForm.valueChanges.subscribe(value => {\n      this.test();\n    });\n  }\n\n  _filter(value) {\n    const filterValue = value.toLowerCase();\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n\n  test() {\n    this.rate$ = this.exchangeService.getSelectedExchangeRate('RUB', this.dateControl.value).pipe(map(value => console.log(value)));\n  }\n\n  kekw(value) {\n    console.log(value);\n    console.log(this.dateControl.value);\n  }\n\n}\n\nExchangeFormComponent.ɵfac = function ExchangeFormComponent_Factory(t) {\n  return new (t || ExchangeFormComponent)(i0.ɵɵdirectiveInject(i1.ExchangeService));\n};\n\nExchangeFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ExchangeFormComponent,\n  selectors: [[\"app-exchange-form\"]],\n  decls: 24,\n  vars: 10,\n  consts: [[1, \"example-form\"], [\"appearance\", \"fill\", 1, \"example-full-width\"], [3, \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", 3, \"matDatepicker\", \"formControl\", \"dateChange\"], [\"matIconSuffix\", \"\", 3, \"for\"], [\"picker\", \"\"], [4, \"ngIf\"], [3, \"value\"], [3, \"exchangeRate\"]],\n  template: function ExchangeFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtext(1, \"kek\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\");\n      i0.ɵɵtext(3, \"kek\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\");\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"form\", 0)(7, \"mat-form-field\", 1)(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Currency\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-select\", 2);\n      i0.ɵɵlistener(\"selectionChange\", function ExchangeFormComponent_Template_mat_select_selectionChange_10_listener() {\n        return ctx.test();\n      });\n      i0.ɵɵtemplate(11, ExchangeFormComponent_mat_option_11_Template, 2, 2, \"mat-option\", 3);\n      i0.ɵɵpipe(12, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"mat-form-field\", 1)(14, \"mat-label\");\n      i0.ɵɵtext(15, \"Choose a date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"input\", 4);\n      i0.ɵɵlistener(\"dateChange\", function ExchangeFormComponent_Template_input_dateChange_16_listener($event) {\n        return ctx.kekw($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"mat-hint\");\n      i0.ɵɵtext(18, \"MM/DD/YYYY\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"mat-datepicker-toggle\", 5)(20, \"mat-datepicker\", null, 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(22, ExchangeFormComponent_ng_container_22_Template, 2, 1, \"ng-container\", 7);\n      i0.ɵɵpipe(23, \"async\");\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(21);\n\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.lel);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 6, ctx.options$));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"matDatepicker\", _r1)(\"formControl\", ctx.dateControl);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"for\", _r1);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(23, 8, ctx.rate$));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.MatFormField, i3.MatHint, i3.MatLabel, i4.MatOption, i5.MatDatepicker, i5.MatDatepickerInput, i5.MatDatepickerToggle, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.NgForm, i6.FormControlDirective, i7.MatInput, i8.MatSelect, i9.ExchangeRateCardComponent, i2.AsyncPipe],\n  styles: [\".example-form[_ngcontent-%COMP%] {\\r\\n    min-width: 150px;\\r\\n    max-width: 500px;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .example-full-width[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4Y2hhbmdlLWZvcm0uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsV0FBVztFQUNiOztFQUVBO0lBQ0UsV0FBVztFQUNiIiwiZmlsZSI6ImV4Y2hhbmdlLWZvcm0uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5leGFtcGxlLWZvcm0ge1xyXG4gICAgbWluLXdpZHRoOiAxNTBweDtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtZnVsbC13aWR0aCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9Il19 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,gBAAvC;AACA,SAA8BC,GAA9B,EAAmCC,SAAnC,QAA+D,MAA/D;;;;;;;;;;;;;;ICMQC;IACEA;IACFA;;;;;IAFoDA;IAClDA;IAAAA;;;;;;IAgBVA;IACIA;IAGJA;;;;;IAFQA;IAAAA;;;;ADjBR,OAAM,MAAOC,qBAAP,CAA4B;EAO9BC,YACYC,eADZ,EAC4C;IAAhC;IANZ,oBAAe,IAAIN,SAAJ,CAAc;MACzBO,QAAQ,EAAE,IAAIR,WAAJ,EADe;MAEzBS,IAAI,EAAE,IAAIT,WAAJ,CAAgB,EAAhB;IAFmB,CAAd,CAAf;IASA,iBAAY,IAAIA,WAAJ,CAAgB,EAAhB,CAAZ;IACA,mBAAc,IAAIA,WAAJ,CAAsB,IAAIU,IAAJ,EAAtB,CAAd;IACA,eAAoB,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAApB;IAEA,WAAc,KAAd;EANK;;EAULC,QAAQ;IACJ,KAAKC,QAAL,GAAgB,KAAKL,eAAL,CAAqBM,gBAArB,EAAhB;IACA,KAAKC,gBAAL,GAAwB,KAAKC,SAAL,CAAeC,YAAf,CAA4BC,IAA5B,CACpBd,SAAS,CAAC,EAAD,CADW,EAEpBD,GAAG,CAACgB,KAAK,IAAI,KAAKC,OAAL,CAAaD,KAAK,IAAI,EAAtB,CAAV,CAFiB,CAAxB;IAIA,KAAKE,YAAL,CAAkBJ,YAAlB,CAA+BK,SAA/B,CAA0CH,KAAD,IAAU;MAC/C,KAAKI,IAAL;IACH,CAFD;EAGH;;EAEOH,OAAO,CAACD,KAAD,EAAc;IACzB,MAAMK,WAAW,GAAGL,KAAK,CAACM,WAAN,EAApB;IAEA,OAAO,KAAKC,OAAL,CAAaC,MAAb,CAAoBC,MAAM,IAAIA,MAAM,CAACH,WAAP,GAAqBI,QAArB,CAA8BL,WAA9B,CAA9B,CAAP;EACH;;EAEDD,IAAI;IACA,KAAKO,KAAL,GAAa,KAAKtB,eAAL,CAAqBuB,uBAArB,CAA6C,KAA7C,EAAoD,KAAKC,WAAL,CAAiBb,KAArE,EAA6ED,IAA7E,CACTf,GAAG,CAACgB,KAAK,IAAIc,OAAO,CAACC,GAAR,CAAYf,KAAZ,CAAV,CADM,CAAb;EAGH;;EAEDgB,IAAI,CAAChB,KAAD,EAAW;IACXc,OAAO,CAACC,GAAR,CAAYf,KAAZ;IACAc,OAAO,CAACC,GAAR,CAAY,KAAKF,WAAL,CAAiBb,KAA7B;EACH;;AA7C6B;;;mBAArBb,uBAAqBD;AAAA;;;QAArBC;EAAqB8B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVlCnC;MAAKA;MAAGA;MACRA;MAAKA;MAAGA;MACRA;MAAKA;MAAOA;MAEZA,gCAA2B,CAA3B,EAA2B,gBAA3B,EAA2B,CAA3B,EAA2B,CAA3B,EAA2B,WAA3B;MAEiBA;MAAQA;MACnBA;MAAYA;QAAA,OAAmBoC,UAAnB;MAAyB,CAAzB;MACVpC;;MAGFA;MAEFA,2CAA6D,EAA7D,EAA6D,WAA7D;MACeA;MAAaA;MACxBA;MAGCA;QAAA,OAAcoC,gBAAd;MAA0B,CAA1B;MAHDpC;MAIAA;MAAUA;MAAUA;MACpBA,6CAA4E,EAA5E,EAA4E,gBAA5E,EAA4E,IAA5E,EAA4E,CAA5E;MAEFA;MAGNA;;;;;;;MAvBKA;MAAAA;MAMkCA;MAAAA;MAQ9BA;MAAAA,oCAAwB,aAAxB,EAAwBoC,eAAxB;MAIoCpC;MAAAA;MAK9BA;MAAAA","names":["FormControl","FormGroup","map","startWith","i0","ExchangeFormComponent","constructor","exchangeService","currency","date","Date","ngOnInit","options$","getAllCurrencies","filteredOptions$","myControl","valueChanges","pipe","value","_filter","exchangeForm","subscribe","test","filterValue","toLowerCase","options","filter","option","includes","rate$","getSelectedExchangeRate","dateControl","console","log","kekw","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Relic\\source\\repos\\ExchangeProject.Web\\ClientApp\\src\\app\\exchange-form\\exchange-form.component.ts","C:\\Users\\Relic\\source\\repos\\ExchangeProject.Web\\ClientApp\\src\\app\\exchange-form\\exchange-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Observable, Subject, map, startWith, switchMap } from 'rxjs';\nimport { ExchangeService } from '../exchange/exchange.service';\n\n@Component({\n    selector: 'app-exchange-form',\n    templateUrl: './exchange-form.component.html',\n    styleUrls: ['./exchange-form.component.css']\n})\nexport class ExchangeFormComponent implements OnInit {\n\n    exchangeForm = new FormGroup({\n        currency: new FormControl(),\n        date: new FormControl('')\n    });\n\n    constructor(\n        private exchangeService: ExchangeService\n    ) { }\n\n    myControl = new FormControl('');\n    dateControl = new FormControl<Date>(new Date());\n    options: string[] = ['One', 'Two', 'Three'];\n    filteredOptions$!: Observable<string[]>;\n    lel: string = 'fff';\n    options$!: Observable<any>;\n    rate$!: Observable<any>;\n\n    ngOnInit() {\n        this.options$ = this.exchangeService.getAllCurrencies();\n        this.filteredOptions$ = this.myControl.valueChanges.pipe(\n            startWith(''),\n            map(value => this._filter(value || '')),\n        );\n        this.exchangeForm.valueChanges.subscribe((value) => {\n            this.test();\n        });\n    }\n\n    private _filter(value: string): string[] {\n        const filterValue = value.toLowerCase();\n\n        return this.options.filter(option => option.toLowerCase().includes(filterValue));\n    }\n\n    test() {\n        this.rate$ = this.exchangeService.getSelectedExchangeRate('RUB', this.dateControl.value!).pipe(\n            map(value => console.log(value))\n        );\n    }\n\n    kekw(value: any) {\n        console.log(value);\n        console.log(this.dateControl.value);\n    }\n    \n}\n","<div>kek</div>\n<div>kek</div>\n<div>{{lel}}</div>\n\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Currency</mat-label>\n      <mat-select (selectionChange)=\"test()\">\n        <mat-option *ngFor=\"let option of options$ | async\" [value]=\"option\">\n          {{option.code}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\" class=\"example-full-width\">\n        <mat-label>Choose a date</mat-label>\n        <input matInput\n         [matDatepicker]=\"picker\"\n         [formControl]=\"dateControl\"\n         (dateChange)=\"kekw($event)\">\n        <mat-hint>MM/DD/YYYY</mat-hint>\n        <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n      </mat-form-field>\n</form>\n\n<ng-container *ngIf=\"rate$| async as WHAT\">\n    <app-exchange-rate-card\n        [exchangeRate]=\"WHAT\">\n    </app-exchange-rate-card>\n</ng-container>\n"]},"metadata":{},"sourceType":"module"}