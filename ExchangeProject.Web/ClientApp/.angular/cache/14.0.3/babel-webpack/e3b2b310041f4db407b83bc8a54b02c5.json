{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../exchange/exchange.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/datepicker\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/card\";\n\nfunction ExchangeFormComponent_mat_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r6.code, \" \");\n  }\n}\n\nfunction ExchangeFormComponent_ng_container_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"p\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 12);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 12);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const rate_r7 = ctx.ngIf;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" On \", i0.ɵɵpipeBind1(3, 4, rate_r7.exchangeDate.date), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" CZK exchange rate is \", rate_r7.rate, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" per \", rate_r7.currency.amount, \" \", rate_r7.currency.code, \"\");\n  }\n}\n\nfunction ExchangeFormComponent_mat_card_footer_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card-footer\");\n    i0.ɵɵelement(1, \"mat-progress-bar\", 13);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ExchangeFormComponent_ng_template_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 12);\n    i0.ɵɵtext(1, \" Choose date and currency to see exchange rate \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class ExchangeFormComponent {\n  constructor(exchangeService) {\n    this.exchangeService = exchangeService;\n    this.exchangeForm = new FormGroup({\n      currency: new FormControl(null),\n      date: new FormControl(new Date())\n    });\n  }\n\n  ngOnInit() {\n    this.firstAvailableDate$ = this.exchangeService.getFirstExistingDate();\n    this.lastAvailableDate$ = this.exchangeService.getLastxistingDate();\n    this.options$ = this.exchangeService.getAllCurrencies();\n    this.exchangeForm.valueChanges.subscribe(values => {\n      if (values.currency && values.date) {\n        this.rate$ = this.exchangeService.getSelectedExchangeRate(values.currency.code, values.date);\n      }\n    });\n  }\n\n}\n\nExchangeFormComponent.ɵfac = function ExchangeFormComponent_Factory(t) {\n  return new (t || ExchangeFormComponent)(i0.ɵɵdirectiveInject(i1.ExchangeService));\n};\n\nExchangeFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ExchangeFormComponent,\n  selectors: [[\"app-exchange-form\"]],\n  decls: 28,\n  vars: 22,\n  consts: [[1, \"main\"], [1, \"example-form\", 3, \"formGroup\"], [\"appearance\", \"fill\", 1, \"example-full-width\"], [\"formControlName\", \"currency\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"formControlName\", \"date\", 3, \"matDatepicker\", \"min\", \"max\", \"value\"], [\"matSuffix\", \"\", 3, \"for\"], [\"picker\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [4, \"ngIf\"], [\"info_content\", \"\"], [3, \"value\"], [1, \"text\"], [\"mode\", \"indeterminate\"]],\n  template: function ExchangeFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"mat-form-field\", 2)(3, \"mat-label\");\n      i0.ɵɵtext(4, \"Currency\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"mat-select\", 3);\n      i0.ɵɵtemplate(6, ExchangeFormComponent_mat_option_6_Template, 2, 2, \"mat-option\", 4);\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"mat-form-field\", 2)(9, \"mat-label\");\n      i0.ɵɵtext(10, \"Choose a date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 5);\n      i0.ɵɵpipe(12, \"async\");\n      i0.ɵɵpipe(13, \"async\");\n      i0.ɵɵpipe(14, \"async\");\n      i0.ɵɵelementStart(15, \"mat-hint\");\n      i0.ɵɵtext(16, \"MM/DD/YYYY\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"mat-datepicker-toggle\", 6)(18, \"mat-datepicker\", null, 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"mat-card\")(21, \"mat-card-content\");\n      i0.ɵɵtemplate(22, ExchangeFormComponent_ng_container_22_Template, 8, 6, \"ng-container\", 8);\n      i0.ɵɵpipe(23, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(24, ExchangeFormComponent_mat_card_footer_24_Template, 2, 0, \"mat-card-footer\", 9);\n      i0.ɵɵpipe(25, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(26, ExchangeFormComponent_ng_template_26_Template, 2, 0, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(19);\n\n      const _r4 = i0.ɵɵreference(27);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.exchangeForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 10, ctx.options$));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"matDatepicker\", _r1)(\"min\", i0.ɵɵpipeBind1(12, 12, ctx.firstAvailableDate$))(\"max\", i0.ɵɵpipeBind1(13, 14, ctx.lastAvailableDate$))(\"value\", i0.ɵɵpipeBind1(14, 16, ctx.lastAvailableDate$));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"for\", _r1);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(23, 18, ctx.rate$))(\"ngIfElse\", _r4);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !i0.ɵɵpipeBind1(25, 20, ctx.rate$));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.MatFormField, i3.MatHint, i3.MatLabel, i3.MatSuffix, i4.MatDatepicker, i4.MatDatepickerInput, i4.MatDatepickerToggle, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, i6.MatInput, i7.MatSelect, i8.MatOption, i9.MatCard, i9.MatCardContent, i9.MatCardFooter, i2.AsyncPipe, i2.DatePipe],\n  styles: [\".example-form[_ngcontent-%COMP%] {\\r\\n  min-width: 150px;\\r\\n  max-width: 300px;\\r\\n  width: 100%;\\r\\n  margin-right: 16px\\r\\n}\\r\\n  \\r\\n  .example-full-width[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .main[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  justify-content:space-between;\\r\\n\\r\\n  .mat-card {\\r\\n    width: 300px;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n\\r\\n    .mat-card-content {\\r\\n        flex-grow: 1;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n  \\r\\n  .text[_ngcontent-%COMP%] {\\r\\n    font-size: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4Y2hhbmdlLWZvcm0uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsV0FBVztFQUNYO0FBQ0Y7O0VBRUU7SUFDRSxXQUFXO0VBQ2I7O0VBRUY7RUFDRSxhQUFhO0VBQ2IsNkJBQTZCOztFQUU3QjtJQUNFLFlBQVk7SUFDWixhQUFhO0lBQ2Isc0JBQXNCOztJQUV0QjtRQUNJLFlBQVk7SUFDaEI7RUFDRjtBQUNGOztFQUVBO0lBQ0ksZUFBZTtBQUNuQiIsImZpbGUiOiJleGNoYW5nZS1mb3JtLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mb3JtIHtcclxuICBtaW4td2lkdGg6IDE1MHB4O1xyXG4gIG1heC13aWR0aDogMzAwcHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4XHJcbn1cclxuICBcclxuICAuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuXHJcbi5tYWluIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO1xyXG5cclxuICAubWF0LWNhcmQge1xyXG4gICAgd2lkdGg6IDMwMHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcblxyXG4gICAgLm1hdC1jYXJkLWNvbnRlbnQge1xyXG4gICAgICAgIGZsZXgtZ3JvdzogMTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi50ZXh0IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxufVxyXG4iXX0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,gBAAvC;;;;;;;;;;;;;;ICKQC;IACEA;IACFA;;;;;IAFoDA;IAClDA;IAAAA;;;;;;IAoBJA;IACEA;IAAiBA;;IAAqCA;IACtDA;IAAiBA;IAAkCA;IACnDA;IAAiBA;IAAmDA;IACtEA;;;;;IAHmBA;IAAAA;IACAA;IAAAA;IACAA;IAAAA;;;;;;IAGrBA;IACEA;IACFA;;;;;;IAOFA;IAAiBA;IAA8CA;;;;ADhCjE,OAAM,MAAOC,qBAAP,CAA4B;EAO9BC,YACYC,eADZ,EAC4C;IAAhC;IANZ,oBAAe,IAAIJ,SAAJ,CAAc;MACzBK,QAAQ,EAAE,IAAIN,WAAJ,CAAkC,IAAlC,CADe;MAEzBO,IAAI,EAAE,IAAIP,WAAJ,CAAsB,IAAIQ,IAAJ,EAAtB;IAFmB,CAAd,CAAf;EAOK;;EAQLC,QAAQ;IAEJ,KAAKC,mBAAL,GAA2B,KAAKL,eAAL,CAAqBM,oBAArB,EAA3B;IACA,KAAKC,kBAAL,GAA0B,KAAKP,eAAL,CAAqBQ,kBAArB,EAA1B;IACA,KAAKC,QAAL,GAAgB,KAAKT,eAAL,CAAqBU,gBAArB,EAAhB;IACA,KAAKC,YAAL,CAAkBC,YAAlB,CAA+BC,SAA/B,CAA0CC,MAAD,IAAW;MAChD,IAAIA,MAAM,CAACb,QAAP,IAAmBa,MAAM,CAACZ,IAA9B,EAAoC;QAChC,KAAKa,KAAL,GAAa,KAAKf,eAAL,CAAqBgB,uBAArB,CAA6CF,MAAM,CAACb,QAAP,CAAgBgB,IAA7D,EAAmEH,MAAM,CAACZ,IAA1E,CAAb;MACH;IACJ,CAJD;EAKH;;AA3B6B;;;mBAArBJ,uBAAqBD;AAAA;;;QAArBC;EAAqBoB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVlCzB,+BAAkB,CAAlB,EAAkB,MAAlB,EAAkB,CAAlB,EAAkB,CAAlB,EAAkB,gBAAlB,EAAkB,CAAlB,EAAkB,CAAlB,EAAkB,WAAlB;MAIiBA;MAAQA;MACnBA;MACEA;;MAGFA;MAEFA,0CAA6D,CAA7D,EAA6D,WAA7D;MACaA;MAAaA;MACxBA;;;;MAMAA;MAAUA;MAAUA;MACpBA,6CAAwE,EAAxE,EAAwE,gBAAxE,EAAwE,IAAxE,EAAwE,CAAxE;MAEFA;MAGFA,kCAAU,EAAV,EAAU,kBAAV;MAEIA;;MAKFA;MACAA;;MAGFA;MAKFA;;;;;;;;MAvCQA;MAAAA;MAI+BA;MAAAA;MAQ1BA;MAAAA,oCAAwB,KAAxB,EAAwBA,+CAAxB,EAAwB,KAAxB,EAAwBA,8CAAxB,EAAwB,OAAxB,EAAwBA,8CAAxB;MAM0BA;MAAAA;MAOlBA;MAAAA,yDAAoB,UAApB,EAAoB0B,GAApB;MAMC1B;MAAAA","names":["FormControl","FormGroup","i0","ExchangeFormComponent","constructor","exchangeService","currency","date","Date","ngOnInit","firstAvailableDate$","getFirstExistingDate","lastAvailableDate$","getLastxistingDate","options$","getAllCurrencies","exchangeForm","valueChanges","subscribe","values","rate$","getSelectedExchangeRate","code","selectors","decls","vars","consts","template","_r4"],"sourceRoot":"","sources":["C:\\Users\\Relic\\source\\repos\\ExchangeProject.Web\\ClientApp\\src\\app\\exchange-form\\exchange-form.component.ts","C:\\Users\\Relic\\source\\repos\\ExchangeProject.Web\\ClientApp\\src\\app\\exchange-form\\exchange-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Observable, Subject, map, startWith, switchMap } from 'rxjs';\nimport { ExchangeService, ICurrency, IExchangeRate } from '../exchange/exchange.service';\n\n@Component({\n    selector: 'app-exchange-form',\n    templateUrl: './exchange-form.component.html',\n    styleUrls: ['./exchange-form.component.css']\n})\nexport class ExchangeFormComponent implements OnInit {\n\n    exchangeForm = new FormGroup({\n        currency: new FormControl<ICurrency | null>(null),\n        date: new FormControl<Date>(new Date())\n    });\n\n    constructor(\n        private exchangeService: ExchangeService\n    ) { }\n\n    options$!: Observable<ICurrency[]>;\n    rate$!: Observable<IExchangeRate>;\n\n    firstAvailableDate$!: Observable<Date>;\n    lastAvailableDate$!: Observable<Date>;\n\n    ngOnInit() {\n\n        this.firstAvailableDate$ = this.exchangeService.getFirstExistingDate();\n        this.lastAvailableDate$ = this.exchangeService.getLastxistingDate();\n        this.options$ = this.exchangeService.getAllCurrencies();\n        this.exchangeForm.valueChanges.subscribe((values) => {\n            if (values.currency && values.date) {\n                this.rate$ = this.exchangeService.getSelectedExchangeRate(values.currency.code, values.date)\n            }\n        });\n    }\n}\n","<div class=\"main\">\n\n  <form [formGroup]=\"exchangeForm\" class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n      <mat-label>Currency</mat-label>\n      <mat-select formControlName=\"currency\">\n        <mat-option *ngFor=\"let option of options$ | async\" [value]=\"option\">\n          {{option.code}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field appearance=\"fill\" class=\"example-full-width\">\n      <mat-label>Choose a date</mat-label>\n      <input matInput\n             [matDatepicker]=\"picker\"\n             [min]=\"firstAvailableDate$ | async\"\n             [max]=\"lastAvailableDate$ | async\"\n             [value]=\"lastAvailableDate$ | async \"\n             formControlName=\"date\">\n      <mat-hint>MM/DD/YYYY</mat-hint>\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n  </form>\n\n  <mat-card>\n    <mat-card-content>\n      <ng-container *ngIf=\"rate$ | async as rate; else info_content\">\n        <p class=\"text\"> On {{rate.exchangeDate.date| date }} </p>\n        <p class=\"text\"> CZK exchange rate is {{rate.rate}}</p>\n        <p class=\"text\"> per {{rate.currency.amount}} {{rate.currency.code}}</p>\n      </ng-container>\n    </mat-card-content>\n    <mat-card-footer *ngIf=\"!(rate$ | async)\">\n      <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n    </mat-card-footer>\n  </mat-card>\n\n</div>\n\n\n<ng-template #info_content>\n  <p class=\"text\"> Choose date and currency to see exchange rate </p>\n</ng-template>\n"]},"metadata":{},"sourceType":"module"}